<button id="flipState">Turn on /  off</button>
<canvas id="myCanvas" width=400 height=400 phx-hook="SendCells"></canvas>

<%= for {name, snapshot} <- @snapshots do %>
    <%= if @my_name != name do %>
        <object type="image/svg+xml" data="<%= snapshot %>"></object>
        <h1 class="subtitle"><%= name %></h1>
    <% end %>
<% end %>


<script type="text/paperscript" canvas="myCanvas">

var isOn = false
var onCol = '#2A1F1D';
var offCol = '#F2EDEC';

var frame = 0

var width = 100;
var height = 100;

var cellSize = 10;
var scale = 3;

var numXCells = width / cellSize;
var numYCells = height / cellSize;

var totalCells = numXCells * numYCells

var cells = [];
var paths = [];

var hitOptions = {
	segments: true,
	stroke: true,
	fill: true,
	tolerance: 5
};

for(var i = 0; i < (totalCells); i++) {
	var cell = 0
	cells.push(cell)
}



setInterval(function(){
    var event = new CustomEvent(
        "newSnapshot",
        {
            detail: {
                cells: paper.project.exportSVG({asString:true})
            },
            bubbles: true,
            cancelable: true
        }
    );
    document.getElementById('myCanvas').dispatchEvent(event)
}, 3000);

cells.forEach(function(cell, i) {
	paths.push(cell == 1 ? drawRec(i, onCol, scale) : drawRec(i, offCol, scale));
})

function onFrame(event) {
	if (isOn && frame % 10 == 0) {
		updateCells()
	}
	frame++
}

function calcNeighbours(indx) {
	var y = Math.floor(indx / numYCells);
	var x = indx % numXCells;

	// conditions
	var canLeft = x > 0
	var canRight = x < numXCells
	var canUp = y > 0
	var canDown = y < numYCells - 1


	upln = canLeft && canUp ? cells[indx - (numXCells - 1)] : 0
	upn = canUp ? cells[indx - numXCells] : 0
	uprn = canRight && canUp ? cells[indx - (numXCells + 1)] : 0
	ln = canLeft ? cells[indx - 1] : 0
	rn = canRight ? cells[indx + 1] : 0
	downln = canDown && canLeft ? cells[indx + (numXCells - 1)] : 0
	downn = canDown ? cells[indx + numXCells] : 0
	downrn = canDown && canRight ? cells[indx + (numXCells + 1)] : 0

	return upn + ln + rn + downn + upln + uprn + downln + downrn
}

document.getElementById('flipState').onclick = function () {
	isOn = !isOn
}

function onMouseDown(event) {
	segment = path = null;
	var hitResult = project.hitTest(event.point, hitOptions);
	var path = hitResult.item

	var cell = path.index;
	calcNeighbours(cell);
	cells[cell] == 1 ? turnOffCell(path, cell) : turnOnCell(path, cell)
}

function updateCells() {
	cells.forEach(function(cal, cell) {
		var neighbours = calcNeighbours(cell)
		if(cells[cell] == 1 && (neighbours == 2 || neighbours == 3)) {
			return
		} else if(cells[cell] == 0 && neighbours == 3) {
			turnOnCell(paths[cell], cell)
		} else {
			turnOffCell(paths[cell], cell)
		}
	})
}

function turnOffCell(path, cell) {
	path.fillColor = offCol
	cells[cell] = 0
}

function turnOnCell(path, cell) {
	path.fillColor = onCol
	cells[cell] = 1
}

function drawRec(indx, col, cellScale) {
	var y = Math.floor(indx / numXCells);
	var x = indx % numXCells;
	var size = cellSize * cellScale;
	var rectangle = new Rectangle(new Point(x * size, y * size), new Size(size, size));
	var path = new Path.Rectangle(rectangle);
	path.fillColor = col;
	path.selected = false;
	return path;
}

</script>