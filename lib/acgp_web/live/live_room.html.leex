<h1><%= @question %></h1>

<button phx-click="new_card"><%= if @question == "" do %>Start<% else %>Change<% end %></button>


<ol>
    <%= for user <- @users do %>
        <li><%= if user.name == @name do %>
            <b><%= user.name %></b>
            <% else %>
                <%= user.name %>
            <% end %>
        </li>
    <% end %>
</ol>

<label for="local-stream">Local Video Stream</label>
<video id="local-stream" autoplay muted></video>
<label for="remote-stream">Remote Video Stream</label>
<video id="remote-stream" autoplay></video>


<button id="call">Call</button>
<button id="disconnect">Disconnect</button>

<script>
document.addEventListener("DOMContentLoaded", function(){
// Constants
const devices = navigator.mediaDevices;
const callButton = document.getElementById('call');
const disconnectButton = document.getElementById('disconnect');

const remoteVideo = document.getElementById('remote-stream');
const localVideo = document.getElementById('local-stream');

let peerConnection;
let channel;
let remoteStream = new MediaStream();

disconnectButton.disabled = false;
callButton.disabled = false;



function addCandidate(params) {
    console.log('Trying to add ICE candidate')
     let candidate = new RTCIceCandidate(params);
     peerConnection.addIceCandidate(candidate).catch(e => {
            console.log("Failure during addIceCandidate(): " + e);
    });
}



    channel = window.socket.channel("video:<%= @room %>", {})
    channel.join()
     .receive("ok", resp => {
        console.log("Joined successfully", resp);
        window.videoConnect(devices, localVideo, remoteStream, channel).then((pc) => peerConnection = pc)
      })
     .receive("error", resp => { console.log("Unable to join", resp) })


     callButton.onclick = () => {
        window.videoCall(peerConnection, channel)
       }

      disconnectButton.onclick = () => {
        window.videoDisconnect(localVideo, remoteVideo, peerConnection, channel)
      }

     channel.on('peer-message', payload => {
          const message = JSON.parse(payload.body);
          switch (message.type) {
            case 'video-offer':
              console.log('offered: ', message.content);
              window.answerCall(message.content, peerConnection, channel);
            break;
            case 'video-answer':
              console.log('answered: ', message.content);
              window.receiveRemote(message.content, peerConnection);
            break;
            case 'ice-candidate':
              addCandidate(message.content)
            break;
            case 'disconnect':
              window.videoDisconnect(disconnectButton, callButton, localVideo, remoteVideo, peerConnection, channel);
            break;
            default:
              console.error('unhandled message type', message.type);
          }
        });
})
</script>