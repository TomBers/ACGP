<h1><%= @question %></h1>

<button phx-click="new_card"><%= if @question == "" do %>Start<% else %>Change<% end %></button>


<ol>
    <%= for user <- @users do %>
        <li><%= if user.name == @name do %>
            <b><%= user.name %></b>
            <% else %>
                <%= user.name %>
            <% end %>
        </li>
    <% end %>
</ol>

<label for="local-stream">Local Video Stream</label>
<video id="local-stream" autoplay muted></video>
<label for="remote-stream">Remote Video Stream</label>
<video id="remote-stream" autoplay></video>


<button id="call">Call</button>
<button id="disconnect">Disconnect</button>

<script>
// Constants
const devices = navigator.mediaDevices;
const callButton = document.getElementById('call');
const disconnectButton = document.getElementById('disconnect');

const remoteVideo = document.getElementById('remote-stream');
const localVideo = document.getElementById('local-stream');

let peerConnection;
let channel;
let remoteStream = new MediaStream();

disconnectButton.disabled = true;
callButton.disabled = true;

const mediaConstraints = {
  audio: true,
  video: true,
};

document.addEventListener("DOMContentLoaded", function(){
    channel = window.socket.channel("video:<%= @room %>", {})
    channel.join()
     .receive("ok", resp => { console.log("Joined successfully", resp) })
     .receive("error", resp => { console.log("Unable to join", resp) })

     channel.on('peer-message', payload => {
          const message = JSON.parse(payload.body);
          switch (message.type) {
            case 'video-offer':
              console.log('offered: ', message.content);
              window.answerCall(message.content, peerConnection, channel);
            break;
            case 'video-answer':
              console.log('answered: ', message.content);
              window.receiveRemote(message.content, peerConnection);
            break;
            case 'ice-candidate':
              console.log('candidate: ', message.content);
              let candidate = new RTCIceCandidate(message.content);
              peerConnection
              .addIceCandidate(candidate)
              .catch(console.error('Error adding ice candidate'));
            break;
            case 'disconnect':
              window.videoDisconnect(disconnectButton, callButton, localVideo, remoteVideo, peerConnection, channel);
            break;
            default:
              console.error('unhandled message type', message.type);
          }
        });

     // Connect
     peerConnection = window.videoConnect(disconnectButton, callButton, devices, mediaConstraints, localVideo, channel);

     callButton.onclick = () => {
        console.log('CALL:')
        window.videoCall(peerConnection, channel)
       }



})
</script>