<div class="tile is-ancestor">
    <div class="tile is-vertical is-12">
        <div class="tile">
            <div class="tile is-parent is-vertical">
                <article class="tile is-child notification is-primary">
                    <p class="title"><%= if @question == "" do %>Question<% else %><%= @question %><% end %></p>
                </article>
                <article class="tile is-child notification is-danger has-text-centered">
                    <button class="button is-large" phx-click="new_card"><%= if @question == "" do %>Start Questions<% else %>Change question<% end %></button>
                </article>
            </div>
            <div class="tile is-parent">
                <article class="tile is-child notification is-info">
                    <figure class="image">
                        <label for="local-stream">Local Video Stream</label>
                        <video id="local-stream" autoplay muted></video>
                        <button id="call" class="button">Connect Video</button>
                        <button id="disconnect" class="hidden">Disconnect</button>
                    </figure>
                    <figure class="image">
                        <label for="remote-stream">Remote Video Stream</label>
                        <video id="remote-stream" autoplay></video>
                    </figure>
                </article>
            </div>
        </div>

    </div>
</div>

<section>
    <p class="title">Instructions:</p>
    <div class="content">
    <ol type="1">
        <li>Click <strong>connect video</strong> to start a webchat</li>
        <li>When the chat has started, click <strong>start questions</strong></li>
        <li>Take turns answering the question on screen</li>
    </ol>
    </div>
</section>



<script>

// Constants
const devices = navigator.mediaDevices;
const callButton = document.getElementById('call');
const disconnectButton = document.getElementById('disconnect');

const remoteVideo = document.getElementById('remote-stream');
const localVideo = document.getElementById('local-stream');

let peerConnection;
let channel;
let remoteStream = new MediaStream();

disconnectButton.style.visibility = 'hidden';


function showConnect() {
    disconnectButton.className = "hidden"
    callButton.className = "button"
}

function showDisconnect() {
        disconnectButton.className = "button"
        callButton.className = "hidden"
}


function addCandidate(params) {
    console.log('Trying to add ICE candidate')
     let candidate = new RTCIceCandidate(params);
     peerConnection.addIceCandidate(candidate).catch(e => {
            console.log("Failure during addIceCandidate(): " + e);
    });
}


document.addEventListener("DOMContentLoaded", function(){
    channel = window.socket.channel("video:<%= @room %>", {})
    channel.join()
     .receive("ok", resp => {
        console.log("Joined successfully", resp);
        remoteVideo.srcObject = remoteStream;
        window.videoConnect(devices, localVideo, remoteStream, channel).then((pc) => peerConnection = pc)
      })
     .receive("error", resp => { console.log("Unable to join", resp) })


     callButton.onclick = () => {
        window.videoCall(peerConnection, channel);
        showDisconnect();
       }

      disconnectButton.onclick = () => {
        window.videoDisconnect(localVideo, remoteVideo, peerConnection, channel);
        showConnect();
      }

     channel.on('peer-message', payload => {
          const message = JSON.parse(payload.body);
          switch (message.type) {
            case 'video-offer':
              console.log('offered: ', message.content);
              window.answerCall(message.content, peerConnection, channel);
              showDisconnect()
            break;
            case 'video-answer':
              console.log('answered: ', message.content);
              window.receiveRemote(message.content, peerConnection);
            break;
            case 'ice-candidate':
              addCandidate(message.content)
            break;
            case 'disconnect':
              window.videoDisconnect(localVideo, remoteVideo, peerConnection, channel);
              showConnect()
            break;
            default:
              console.error('unhandled message type', message.type);
          }
        });
})
</script>